#!/usr/bin/env ruby

# frozen_string_literal: true

require_relative '../lib/node'
require_relative '../lib/directed_acyclic_path_graph'

module Suburb
  module DSL
    class Root
      def files
        @files ||= []
      end

      def file(main_file, &block)
        f = DSL::File.new(main_file)
        f.instance_exec(&block)
        files << f
      end

      def to_dag(root_path)
        dag = DirectedAcyclicPathGraph.new(root_path)
        files.each do |f|
          f.outs.each do |out_|
            dag.add_node(out_)
            f.ins.each do |in_|
              dag.add_node(in_)
              dag.add_dependency(out_, in_)
            end
          end
        end
        dag
      end
    end

    class File
      def initialize(main_file)
        @outs = [main_file]
      end

      def outs
        @outs
      end

      def ins
        @ins ||= []
      end

      def run(&block)
        @run = block
      end
    end

    class Run
      def asdf(command)
        sh "asdf exec #{command}"
      end
    end
  end

  class Runner
    require 'pathname'

    def run(target_file_path)
      subu_rb = find_subu_rb(target_file_path) or die("No subu.rb found defining target file '#{target_file_path}' found")
      spec = DSL::Root.new
      spec.instance_eval(File.read(subu_rb))
      dag = spec.to_dag(subu_rb.dirname)
      raise "some targets do not exist" unless dag.all_dependencies_exist?
    end

    def find_subu_rb(target_file_path)
      Pathname.new(target_file_path).ascend do |parent|
        maybe_subu = parent + "subu.rb"
        return maybe_subu.realpath if maybe_subu.exist?
      end
    end

    def die(reason)
      warn reason
      exit 1
    end
  end
end

raise 'no file task given' unless ARGV[0]

Suburb::Runner.new.run(File.expand_path(ARGV[0]))
